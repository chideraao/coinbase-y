[{"/Users/Chidera/Desktop/react projects/coinbase-clone/src/index.js":"1","/Users/Chidera/Desktop/react projects/coinbase-clone/src/App.js":"2","/Users/Chidera/Desktop/react projects/coinbase-clone/src/reportWebVitals.js":"3","/Users/Chidera/Desktop/react projects/coinbase-clone/src/Components/Header.jsx":"4","/Users/Chidera/Desktop/react projects/coinbase-clone/src/Components/ChartTable.jsx":"5","/Users/Chidera/Desktop/react projects/coinbase-clone/src/Components/Footer.jsx":"6","/Users/Chidera/Desktop/react projects/coinbase-clone/src/Components/Banner.jsx":"7","/Users/Chidera/Desktop/react projects/coinbase-clone/src/Pages/Home.jsx":"8","/Users/Chidera/Desktop/react projects/coinbase-clone/src/Pages/Careers.jsx":"9","/Users/Chidera/Desktop/react projects/coinbase-clone/src/State/ReviewsContext.jsx":"10","/Users/Chidera/Desktop/react projects/coinbase-clone/src/Pages/About.jsx":"11","/Users/Chidera/Desktop/react projects/coinbase-clone/src/Components/AboutHeader.jsx":"12","/Users/Chidera/Desktop/react projects/coinbase-clone/src/Components/AboutFooter.jsx":"13","/Users/Chidera/Desktop/react projects/coinbase-clone/src/State/AboutContext.jsx":"14","/Users/Chidera/Desktop/react projects/coinbase-clone/src/Pages/Earn.jsx":"15","/Users/Chidera/Desktop/react projects/coinbase-clone/src/State/EarnContext.jsx":"16","/Users/Chidera/Desktop/react projects/coinbase-clone/src/Pages/Press.jsx":"17","/Users/Chidera/Desktop/react projects/coinbase-clone/src/Pages/Learn.jsx":"18","/Users/Chidera/Desktop/react projects/coinbase-clone/src/Pages/Prices.jsx":"19","/Users/Chidera/Desktop/react projects/coinbase-clone/src/State/GlobalContext.jsx":"20","/Users/Chidera/Desktop/react projects/coinbase-clone/src/Components/CoinsSparkline.jsx":"21","/Users/Chidera/Desktop/react projects/coinbase-clone/src/Components/PricesTable.jsx":"22","/Users/Chidera/Desktop/react projects/coinbase-clone/src/State/PricesContext.jsx":"23","/Users/Chidera/Desktop/react projects/coinbase-clone/src/Components/PricesTicker.jsx":"24","/Users/Chidera/Desktop/react projects/coinbase-clone/src/State/PricesReducer.jsx":"25","/Users/Chidera/Desktop/react projects/coinbase-clone/src/Components/PricesSparkline.jsx":"26"},{"size":473,"mtime":1608686899756,"results":"27","hashOfConfig":"28"},{"size":1684,"mtime":1611361627458,"results":"29","hashOfConfig":"28"},{"size":362,"mtime":1608080109210,"results":"30","hashOfConfig":"28"},{"size":2006,"mtime":1611334482526,"results":"31","hashOfConfig":"28"},{"size":6240,"mtime":1611703462443,"results":"32","hashOfConfig":"28"},{"size":2356,"mtime":1610673642905,"results":"33","hashOfConfig":"28"},{"size":772,"mtime":1609439797649,"results":"34","hashOfConfig":"28"},{"size":9000,"mtime":1610641513465,"results":"35","hashOfConfig":"28"},{"size":9522,"mtime":1610844240843,"results":"36","hashOfConfig":"28"},{"size":5524,"mtime":1609691436300,"results":"37","hashOfConfig":"28"},{"size":5539,"mtime":1609981046788,"results":"38","hashOfConfig":"28"},{"size":941,"mtime":1609420615150,"results":"39","hashOfConfig":"28"},{"size":1668,"mtime":1610673631884,"results":"40","hashOfConfig":"28"},{"size":5023,"mtime":1609004660326,"results":"41","hashOfConfig":"28"},{"size":4058,"mtime":1609775706245,"results":"42","hashOfConfig":"28"},{"size":5492,"mtime":1609174226322,"results":"43","hashOfConfig":"28"},{"size":2168,"mtime":1609420731400,"results":"44","hashOfConfig":"28"},{"size":9972,"mtime":1609463203569,"results":"45","hashOfConfig":"28"},{"size":8258,"mtime":1611704198124,"results":"46","hashOfConfig":"28"},{"size":926,"mtime":1611321423110,"results":"47","hashOfConfig":"28"},{"size":4139,"mtime":1610736023186,"results":"48","hashOfConfig":"28"},{"size":8845,"mtime":1611364210696,"results":"49","hashOfConfig":"28"},{"size":1358,"mtime":1611703817937,"results":"50","hashOfConfig":"28"},{"size":2375,"mtime":1611166959621,"results":"51","hashOfConfig":"28"},{"size":715,"mtime":1611228054188,"results":"52","hashOfConfig":"28"},{"size":4205,"mtime":1611448488627,"results":"53","hashOfConfig":"28"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},"3n9swc",{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"56"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"56"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"56"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"104","messages":"105","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"56"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"56"},"/Users/Chidera/Desktop/react projects/coinbase-clone/src/index.js",[],["112","113"],"/Users/Chidera/Desktop/react projects/coinbase-clone/src/App.js",[],"/Users/Chidera/Desktop/react projects/coinbase-clone/src/reportWebVitals.js",[],"/Users/Chidera/Desktop/react projects/coinbase-clone/src/Components/Header.jsx",[],"/Users/Chidera/Desktop/react projects/coinbase-clone/src/Components/ChartTable.jsx",["114"],"import Axios from \"axios\";\nimport React, { useContext, useEffect } from \"react\";\nimport {\n\tCryptosContext,\n\tSparklineContext,\n\tUserDataContext,\n} from \"../State/GlobalContext\";\nimport {\n\tBCHChart,\n\tBTCChart,\n\tETHChart,\n\tLTCChart,\n} from \"../Components/CoinsSparkline\";\n\n/**Defining API endpoints */\nconst api = {\n\tbase: \"https://api.nomics.com/v1/currencies/ticker?\",\n\tkey: \"f120f033bda2bb941c1e6925f7ecfbe1\",\n\tsparklineBase: \"https://api.nomics.com/v1/currencies/sparkline?\",\n\tzoneKey: \"d65e37f4206340d188baba3c12561f09\",\n\tzoneBase: \"https://api.ipgeolocation.io/ipgeo?\",\n};\n/** SETTING UP SPARKLINE DATA FOR THE PAST 24 HOURS */\n//Get today's date using the JavaScript Date object.\nlet ourDate = new Date();\n\n//Change it so that it is the previous day\nlet pastDate = ourDate.getDate() - 1;\nourDate.setDate(pastDate);\nlet month = ourDate.getMonth() + 1;\nlet year = ourDate.getFullYear();\nlet day = ourDate.getDate();\nlet hour = ourDate.getHours();\nlet minute = ourDate.getMinutes();\nlet seconds = ourDate.getSeconds();\n\n/**Regex for commas after every three digits */\n\nconst addCommasToNumber = (num) => {\n\treturn num.toString().replace(/\\B(?<!\\.\\d*)(?=(\\d{3})+(?!\\d))/g, \",\");\n};\n\n/** Main table component */\n\nfunction ChartTable() {\n\tconst [cryptos, setCryptos] = useContext(CryptosContext);\n\tconst [userData, setUserData] = useContext(UserDataContext);\n\tconst [sparkline, setSparkline] = useContext(SparklineContext);\n\n\tuseEffect(() => {\n\t\tAxios.get(`${api.zoneBase}apiKey=${api.zoneKey}&include=useragent`)\n\t\t\t.then((response) => {\n\t\t\t\tsetUserData(response.data);\n\t\t\t\tAxios.all([\n\t\t\t\t\tAxios.get(\n\t\t\t\t\t\t`${api.sparklineBase}key=${\n\t\t\t\t\t\t\tapi.key\n\t\t\t\t\t\t}&ids=BTC,ETH,BCH,LTC&start=${year}-${\n\t\t\t\t\t\t\tmonth < 10 ? `0${month}` : month\n\t\t\t\t\t\t}-${day < 10 ? `0${day}` : day}T${\n\t\t\t\t\t\t\thour < 10 ? `0${hour}` : hour\n\t\t\t\t\t\t}%3A${minute < 10 ? `0${minute}` : minute}%3A${\n\t\t\t\t\t\t\tseconds < 10 ? `0${seconds}` : seconds\n\t\t\t\t\t\t}Z&convert=${response.data.currency.code}`\n\t\t\t\t\t),\n\t\t\t\t\tAxios.get(\n\t\t\t\t\t\t`${api.base}key=${api.key}&ids=BTC,ETH,LTC,BCH&convert=${response.data.currency.code}&interval=1d`\n\t\t\t\t\t),\n\t\t\t\t])\n\t\t\t\t\t.then((res) => {\n\t\t\t\t\t\tsetCryptos(res[1].data);\n\t\t\t\t\t\tsetSparkline(res[0].data);\n\t\t\t\t\t})\n\t\t\t\t\t.catch((error) => {\n\t\t\t\t\t\tconsole.log(error);\n\t\t\t\t\t});\n\t\t\t})\n\t\t\t.catch((err) => {\n\t\t\t\tconsole.log(err);\n\t\t\t});\n\t\treturn () => {\n\t\t\t// setCryptos([]);\n\t\t\t// setSparkline([]);\n\t\t\t// console.log(\"cleaned up\");\n\t\t};\n\t}, [setCryptos, setSparkline, setUserData]);\n\n\t/** memoization of table values and prevention of rendering before the components are ready for render */\n\n\tconst tableData = React.useMemo(\n\t\t() =>\n\t\t\t!cryptos.length && !sparkline.length\n\t\t\t\t? []\n\t\t\t\t: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\timgSrc:\n\t\t\t\t\t\t\t\t\"https://s3.us-east-2.amazonaws.com/nomics-api/static/images/currencies/btc.svg\",\n\t\t\t\t\t\t\tname: `${cryptos[0].name} `,\n\t\t\t\t\t\t\tid: `${cryptos[0].symbol}`,\n\t\t\t\t\t\t\tprice: `${addCommasToNumber(\n\t\t\t\t\t\t\t\tMath.round(cryptos[0].price * 100) / 100\n\t\t\t\t\t\t\t)}`,\n\t\t\t\t\t\t\tchange: `${\n\t\t\t\t\t\t\t\tMath.round(cryptos[0][\"1d\"].price_change_pct * 10000) / 100\n\t\t\t\t\t\t\t}%`,\n\t\t\t\t\t\t\tchart: <BTCChart />,\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\timgSrc:\n\t\t\t\t\t\t\t\t\"https://s3.us-east-2.amazonaws.com/nomics-api/static/images/currencies/eth.svg\",\n\t\t\t\t\t\t\tname: `${cryptos[1].name}`,\n\t\t\t\t\t\t\tid: `${cryptos[1].symbol}`,\n\t\t\t\t\t\t\tprice: `${addCommasToNumber(\n\t\t\t\t\t\t\t\tMath.round(cryptos[1].price * 100) / 100\n\t\t\t\t\t\t\t)}`,\n\t\t\t\t\t\t\tchange: `${\n\t\t\t\t\t\t\t\tMath.round(cryptos[1][\"1d\"].price_change_pct * 10000) / 100\n\t\t\t\t\t\t\t}%`,\n\t\t\t\t\t\t\tchart: <ETHChart />,\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\timgSrc:\n\t\t\t\t\t\t\t\t\"https://s3.us-east-2.amazonaws.com/nomics-api/static/images/currencies/ltc.svg\",\n\t\t\t\t\t\t\tname: `${cryptos[2].name}   `,\n\t\t\t\t\t\t\tid: `${cryptos[2].symbol}`,\n\t\t\t\t\t\t\tprice: `${addCommasToNumber(\n\t\t\t\t\t\t\t\tMath.round(cryptos[2].price * 100) / 100\n\t\t\t\t\t\t\t)}`,\n\t\t\t\t\t\t\tchange: `${\n\t\t\t\t\t\t\t\tMath.round(cryptos[2][\"1d\"].price_change_pct * 10000) / 100\n\t\t\t\t\t\t\t}%`,\n\t\t\t\t\t\t\tchart: <LTCChart />,\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\timgSrc:\n\t\t\t\t\t\t\t\t\"https://s3.us-east-2.amazonaws.com/nomics-api/static/images/currencies/bch.svg\",\n\t\t\t\t\t\t\tname: `${cryptos[3].name} `,\n\t\t\t\t\t\t\tid: `${cryptos[3].symbol}`,\n\t\t\t\t\t\t\tprice: `${addCommasToNumber(\n\t\t\t\t\t\t\t\tMath.round(cryptos[3].price * 100) / 100\n\t\t\t\t\t\t\t)}`,\n\t\t\t\t\t\t\tchange: `${\n\t\t\t\t\t\t\t\tMath.round(cryptos[3][\"1d\"].price_change_pct * 10000) / 100\n\t\t\t\t\t\t\t}%`,\n\t\t\t\t\t\t\tchart: <BCHChart />,\n\t\t\t\t\t\t},\n\t\t\t\t  ],\n\t\t[cryptos, sparkline]\n\t);\n\n\treturn (\n\t\t<div className=\"home-table\">\n\t\t\t{!cryptos.length && !sparkline.length ? (\n\t\t\t\t\"\"\n\t\t\t) : (\n\t\t\t\t<table role=\"table\">\n\t\t\t\t\t<thead>\n\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t<th className=\"table-serial\">#</th>\n\t\t\t\t\t\t\t<th colSpan=\"2\">Name</th>\n\t\t\t\t\t\t\t<th className=\"table-empty\"></th>\n\t\t\t\t\t\t\t<th className=\"table-empty\"></th>\n\t\t\t\t\t\t\t<th className=\"table-empty\"></th>\n\t\t\t\t\t\t\t<th>Price</th>\n\t\t\t\t\t\t\t<th>Change</th>\n\t\t\t\t\t\t\t<th className=\"table-chart\">Chart</th>\n\t\t\t\t\t\t\t<th className=\"table-trade\">Trade</th>\n\t\t\t\t\t\t</tr>\n\t\t\t\t\t</thead>\n\n\t\t\t\t\t<tbody>\n\t\t\t\t\t\t{tableData.map((item, index) => {\n\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t<tr key={index}>\n\t\t\t\t\t\t\t\t\t<td className=\"table-serial\">{index + 1}</td>\n\t\t\t\t\t\t\t\t\t<a href=\"#\">\n\t\t\t\t\t\t\t\t\t\t<td colSpan=\"2\" className=\"flex\">\n\t\t\t\t\t\t\t\t\t\t\t<div className=\"\">\n\t\t\t\t\t\t\t\t\t\t\t\t<img src={item.imgSrc} alt={`${item.name} logo`} />\n\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t<div className=\"hidden-flex\">\n\t\t\t\t\t\t\t\t\t\t\t\t{item.name} &nbsp;&nbsp; <span>{item.id}</span>\n\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t\t</a>\n\n\t\t\t\t\t\t\t\t\t<td className=\"table-empty\"></td>\n\t\t\t\t\t\t\t\t\t<td className=\"table-empty\"></td>\n\t\t\t\t\t\t\t\t\t<td className=\"table-empty\"></td>\n\t\t\t\t\t\t\t\t\t<td className=\"table-empty\"></td>\n\t\t\t\t\t\t\t\t\t<td className=\"crypto-price\">\n\t\t\t\t\t\t\t\t\t\t{userData.currency.symbol} {item.price}\n\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t<td\n\t\t\t\t\t\t\t\t\t\t\tclassName={\n\t\t\t\t\t\t\t\t\t\t\t\tcryptos[index][\"1d\"].price_change_pct * 100 >= 0\n\t\t\t\t\t\t\t\t\t\t\t\t\t? \"gains\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t: \"loss\"\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t{cryptos[index][\"1d\"].price_change_pct * 100 >= 1\n\t\t\t\t\t\t\t\t\t\t\t\t? `+${item.change}`\n\t\t\t\t\t\t\t\t\t\t\t\t: `${item.change}`}\n\t\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t<td className=\"table-chart\">{item.chart}</td>\n\t\t\t\t\t\t\t\t\t<td className=\"table-trade\">\n\t\t\t\t\t\t\t\t\t\t<button className=\"btn\">Buy</button>\n\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t})}\n\t\t\t\t\t</tbody>\n\t\t\t\t</table>\n\t\t\t)}\n\t\t</div>\n\t);\n}\n\nexport default ChartTable;\n","/Users/Chidera/Desktop/react projects/coinbase-clone/src/Components/Footer.jsx",[],"/Users/Chidera/Desktop/react projects/coinbase-clone/src/Components/Banner.jsx",[],"/Users/Chidera/Desktop/react projects/coinbase-clone/src/Pages/Home.jsx",[],"/Users/Chidera/Desktop/react projects/coinbase-clone/src/Pages/Careers.jsx",[],"/Users/Chidera/Desktop/react projects/coinbase-clone/src/State/ReviewsContext.jsx",[],"/Users/Chidera/Desktop/react projects/coinbase-clone/src/Pages/About.jsx",[],"/Users/Chidera/Desktop/react projects/coinbase-clone/src/Components/AboutHeader.jsx",[],"/Users/Chidera/Desktop/react projects/coinbase-clone/src/Components/AboutFooter.jsx",[],"/Users/Chidera/Desktop/react projects/coinbase-clone/src/State/AboutContext.jsx",[],"/Users/Chidera/Desktop/react projects/coinbase-clone/src/Pages/Earn.jsx",[],"/Users/Chidera/Desktop/react projects/coinbase-clone/src/State/EarnContext.jsx",[],"/Users/Chidera/Desktop/react projects/coinbase-clone/src/Pages/Press.jsx",[],"/Users/Chidera/Desktop/react projects/coinbase-clone/src/Pages/Learn.jsx",[],"/Users/Chidera/Desktop/react projects/coinbase-clone/src/Pages/Prices.jsx",["115","116","117","118","119"],"/Users/Chidera/Desktop/react projects/coinbase-clone/src/State/GlobalContext.jsx",[],"/Users/Chidera/Desktop/react projects/coinbase-clone/src/Components/CoinsSparkline.jsx",["120","121","122","123","124"],"import React, { useContext, useEffect, useState } from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport { SparklineContext } from \"../State/GlobalContext\";\n\nexport function BTCChart() {\n\tconst [dataChart, setDataChart] = useState({});\n\tconst [sparkline, setSparkline] = useContext(SparklineContext);\n\t/**chart js styling options */\n\tconst chartOptions = {\n\t\t// maintainAspectRatio: false,\n\t\ttooltips: {\n\t\t\tenabled: false,\n\t\t},\n\t\telements: {\n\t\t\tpoint: { radius: 0 },\n\t\t},\n\t\tlegend: {\n\t\t\tdisplay: false,\n\t\t},\n\t\tscales: {\n\t\t\txAxes: [{ display: false }],\n\t\t\tyAxes: [{ display: false }],\n\t\t},\n\t};\n\n\t/**creating empty arrays for the chart data and pushing the props gotten from home component */\n\n\tuseEffect(() => {\n\t\tlet prices = [];\n\t\tlet timestamps = [];\n\t\tprices.push(sparkline[1].prices);\n\t\ttimestamps.push(sparkline[1].timestamps);\n\n\t\tsetDataChart({\n\t\t\tlabels: timestamps[0],\n\t\t\tdatasets: [\n\t\t\t\t{\n\t\t\t\t\tlabel: \"prices\",\n\t\t\t\t\tdata: prices[0],\n\t\t\t\t\tborderColor: \"rgba(17, 51, 83, 0.3)\",\n\t\t\t\t\tfill: false,\n\t\t\t\t},\n\t\t\t],\n\t\t});\n\t}, []);\n\n\treturn (\n\t\t<div className=\"sparkline-container\">\n\t\t\t<Line data={dataChart} options={chartOptions} />\n\t\t</div>\n\t);\n}\n\nexport function ETHChart() {\n\tconst [dataChart, setDataChart] = useState({});\n\tconst [sparkline, setSparkline] = useContext(SparklineContext);\n\t/**chart js styling options */\n\tconst chartOptions = {\n\t\t// maintainAspectRatio: false,\n\t\ttooltips: {\n\t\t\tenabled: false,\n\t\t},\n\t\telements: {\n\t\t\tpoint: { radius: 0 },\n\t\t},\n\t\tlegend: {\n\t\t\tdisplay: false,\n\t\t},\n\t\tscales: {\n\t\t\txAxes: [{ display: false }],\n\t\t\tyAxes: [{ display: false }],\n\t\t},\n\t};\n\n\t/**creating empty arrays for the chart data and pushing the props gotten from home component */\n\n\tuseEffect(() => {\n\t\tlet prices = [];\n\t\tlet timestamps = [];\n\n\t\tif (sparkline !== {}) {\n\t\t\tprices.push(sparkline[2].prices);\n\t\t\ttimestamps.push(sparkline[2].timestamps);\n\n\t\t\tsetDataChart({\n\t\t\t\tlabels: timestamps[0],\n\t\t\t\tdatasets: [\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: \"prices\",\n\t\t\t\t\t\tdata: prices[0],\n\t\t\t\t\t\tborderColor: \"rgba(17, 51, 83, 0.3)\",\n\t\t\t\t\t\tfill: false,\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t});\n\t\t}\n\t}, [sparkline]);\n\n\treturn (\n\t\t<div className=\"sparkline-container\">\n\t\t\t<Line data={dataChart} options={chartOptions} />\n\t\t</div>\n\t);\n}\n\nexport function LTCChart() {\n\tconst [dataChart, setDataChart] = useState({});\n\tconst [sparkline, setSparkline] = useContext(SparklineContext);\n\t/**chart js styling options */\n\tconst chartOptions = {\n\t\ttooltips: {\n\t\t\tenabled: false,\n\t\t},\n\t\telements: {\n\t\t\tpoint: { radius: 0 },\n\t\t},\n\t\tlegend: {\n\t\t\tdisplay: false,\n\t\t},\n\t\tscales: {\n\t\t\txAxes: [{ display: false }],\n\t\t\tyAxes: [{ display: false }],\n\t\t},\n\t};\n\n\t/**creating empty arrays for the chart data and pushing the props gotten from home component */\n\n\tuseEffect(() => {\n\t\tlet prices = [];\n\t\tlet timestamps = [];\n\n\t\tprices.push(sparkline[3].prices);\n\t\ttimestamps.push(sparkline[3].timestamps);\n\n\t\tsetDataChart({\n\t\t\tlabels: timestamps[0],\n\t\t\tdatasets: [\n\t\t\t\t{\n\t\t\t\t\tlabel: \"prices\",\n\t\t\t\t\tdata: prices[0],\n\t\t\t\t\tborderColor: \"rgba(17, 51, 83, 0.3)\",\n\t\t\t\t\tfill: false,\n\t\t\t\t},\n\t\t\t],\n\t\t});\n\t}, [sparkline]);\n\n\treturn (\n\t\t<div className=\"sparkline-container\">\n\t\t\t<Line data={dataChart} options={chartOptions} />\n\t\t</div>\n\t);\n}\n\nexport function BCHChart() {\n\tconst [dataChart, setDataChart] = useState({});\n\tconst [sparkline, setSparkline] = useContext(SparklineContext);\n\n\t/**chart js styling options */\n\tconst chartOptions = {\n\t\ttooltips: {\n\t\t\tenabled: false,\n\t\t},\n\t\telements: {\n\t\t\tpoint: { radius: 0 },\n\t\t},\n\t\tlegend: {\n\t\t\tdisplay: false,\n\t\t},\n\t\tscales: {\n\t\t\txAxes: [{ display: false }],\n\t\t\tyAxes: [{ display: false }],\n\t\t},\n\t};\n\n\t/**creating empty arrays for the chart data and pushing the props gotten from home component */\n\n\tuseEffect(() => {\n\t\tlet prices = [];\n\t\tlet timestamps = [];\n\n\t\tprices.push(sparkline[0].prices);\n\t\ttimestamps.push(sparkline[0].timestamps);\n\n\t\tsetDataChart({\n\t\t\tlabels: timestamps[0],\n\t\t\tdatasets: [\n\t\t\t\t{\n\t\t\t\t\tlabel: \"prices\",\n\t\t\t\t\tdata: prices[0],\n\t\t\t\t\tborderColor: \"rgba(17, 51, 83, 0.3)\",\n\t\t\t\t\tfill: false,\n\t\t\t\t},\n\t\t\t],\n\t\t});\n\t}, [sparkline]);\n\n\treturn (\n\t\t<div className=\"sparkline-container\">\n\t\t\t<Line data={dataChart} options={chartOptions} />\n\t\t</div>\n\t);\n}\n","/Users/Chidera/Desktop/react projects/coinbase-clone/src/Components/PricesTable.jsx",["125","126"],"import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport Axios from \"axios\";\nimport React, { useContext, useEffect, useState } from \"react\";\nimport { UserDataContext } from \"../State/GlobalContext\";\nimport {\n\tPricesContext,\n\tPricesCryptoContext,\n\tPricesSparklineContext,\n\tShowcaseCryptosContext,\n} from \"../State/PricesContext\";\nimport { ALL_ASSETS, TOP_GAINERS, TOP_LOSERS } from \"../State/PricesReducer\";\n\n/**Defining API endpoints */\nconst api = {\n\tbase: \"https://api.nomics.com/v1/currencies/ticker?\",\n\tkey: \"f120f033bda2bb941c1e6925f7ecfbe1\",\n\tsparklineBase: \"https://api.nomics.com/v1/currencies/sparkline?\",\n\tzoneKey: \"d65e37f4206340d188baba3c12561f09\",\n\tzoneBase: \"https://api.ipgeolocation.io/ipgeo?\",\n};\n\n/** SETTING UP SPARKLINE DATA FOR THE PAST 24 HOURS */\n//Get today's date using the JavaScript Date object.\nlet ourDate = new Date();\n\n//Change it so that it is the previous day\nlet pastDate = ourDate.getDate() - 1;\nourDate.setDate(pastDate);\nlet month = ourDate.getMonth() + 1;\nlet year = ourDate.getFullYear();\nlet day = ourDate.getDate();\nlet hour = ourDate.getHours();\nlet minute = ourDate.getMinutes();\nlet seconds = ourDate.getSeconds();\n\n/**Regex for commas after every three digits */\nconst addCommasToNumber = (num) => {\n\treturn num.toString().replace(/\\B(?<!\\.\\d*)(?=(\\d{3})+(?!\\d))/g, \",\");\n};\n\nconst intlFormat = (num) => {\n\treturn new Intl.NumberFormat().format(Math.round(num * 10) / 10);\n};\nconst abbr = (num) => {\n\tif (num >= 1000000000000) return intlFormat(num / 1000000000000) + \"T\";\n\tif (num >= 1000000000) return intlFormat(num / 1000000000) + \"B\";\n\tif (num >= 1000000) return intlFormat(num / 1000000) + \"M\";\n\tif (num >= 1000) return intlFormat(num / 1000) + \"K\";\n\treturn intlFormat(num);\n};\n\nfunction PricesTable() {\n\tconst [cryptos, setCryptos] = useContext(PricesCryptoContext);\n\tconst [userData, setUserData] = useContext(UserDataContext);\n\tconst [state, dispatch] = useContext(PricesContext);\n\tconst [isLoading, setIsLoading] = useState(false);\n\tconst [input, setInput] = useState(\"\");\n\tconst [selectOption, setSelectOption] = useState(\"1d\");\n\tconst [sparkline, setSparkline] = useContext(PricesSparklineContext);\n\tconst [showcaseCryptos, setShowcaseCryptos] = useContext(\n\t\tShowcaseCryptosContext\n\t);\n\n\tuseEffect(() => {\n\t\tAxios.get(`${api.zoneBase}apiKey=${api.zoneKey}&include=useragent`)\n\t\t\t.then((response) => {\n\t\t\t\tsetUserData(response.data);\n\t\t\t\tAxios.all([\n\t\t\t\t\tAxios.get(\n\t\t\t\t\t\t`${api.base}key=${api.key}&per-page=100&page=1&convert=${response.data.currency.code}&interval=1h,1d,7d,30d,365d`\n\t\t\t\t\t),\n\t\t\t\t\tAxios.get(\n\t\t\t\t\t\t`${api.sparklineBase}key=${\n\t\t\t\t\t\t\tapi.key\n\t\t\t\t\t\t}&ids=BTC,GRT,BAT,XTZ&start=${year}-${\n\t\t\t\t\t\t\tmonth < 10 ? `0${month}` : month\n\t\t\t\t\t\t}-${day < 10 ? `0${day}` : day}T${\n\t\t\t\t\t\t\thour < 10 ? `0${hour}` : hour\n\t\t\t\t\t\t}%3A${minute < 10 ? `0${minute}` : minute}%3A${\n\t\t\t\t\t\t\tseconds < 10 ? `0${seconds}` : seconds\n\t\t\t\t\t\t}Z&convert=${response.data.currency.code}`\n\t\t\t\t\t),\n\t\t\t\t\tAxios.get(\n\t\t\t\t\t\t`${api.base}key=${api.key}&ids=BTC,GRT,XTZ,BAT&convert=${response.data.currency.code}&interval=1d`\n\t\t\t\t\t),\n\t\t\t\t])\n\t\t\t\t\t.then((res) => {\n\t\t\t\t\t\tsetCryptos(res[0].data);\n\t\t\t\t\t\tsetShowcaseCryptos(res[2].data);\n\t\t\t\t\t\tsetSparkline(res[1].data);\n\t\t\t\t\t})\n\t\t\t\t\t.catch((error) => {\n\t\t\t\t\t\tconsole.log(error);\n\t\t\t\t\t});\n\t\t\t})\n\t\t\t.catch((err) => {\n\t\t\t\tconsole.log(err);\n\t\t\t});\n\t\treturn () => {\n\t\t\t// setCryptos([]);\n\t\t\t// setSparkline([]);\n\t\t\tconsole.log(\"cleaned up\");\n\t\t};\n\t}, [setCryptos, setUserData, setSparkline, setShowcaseCryptos]);\n\n\tconsole.log(showcaseCryptos);\n\n\tconst handleChange = (e) => {\n\t\tsetInput(e.target.value);\n\t};\n\n\tconst handleSelect = (e) => {\n\t\tsetSelectOption(e.target.value);\n\t\tsetIsLoading(true);\n\t\tsetTimeout(() => {\n\t\t\tsetIsLoading(false);\n\t\t}, 1000);\n\t};\n\n\tconst handleAllClick = () => {\n\t\tdispatch({ type: ALL_ASSETS });\n\t\tsetIsLoading(true);\n\t\tsetTimeout(() => {\n\t\t\tfor (let index = 0; index < 100; index++) {\n\t\t\t\tcryptos.sort(function (b, a) {\n\t\t\t\t\treturn a.market_cap - b.market_cap;\n\t\t\t\t});\n\t\t\t}\n\t\t\tsetIsLoading(false);\n\t\t}, 2000);\n\t};\n\n\tconst handleGainClick = () => {\n\t\tdispatch({ type: TOP_GAINERS });\n\t\tsetIsLoading(true);\n\t\tsetTimeout(() => {\n\t\t\tfor (let index = 0; index < 100; index++) {\n\t\t\t\tcryptos.sort((b, a) => {\n\t\t\t\t\treturn (\n\t\t\t\t\t\ta[`${selectOption}`].price_change_pct -\n\t\t\t\t\t\tb[`${selectOption}`].price_change_pct\n\t\t\t\t\t);\n\t\t\t\t});\n\t\t\t}\n\t\t\tsetIsLoading(false);\n\t\t}, 1500);\n\t};\n\n\tconst handleLossClick = () => {\n\t\tdispatch({ type: TOP_LOSERS });\n\t\tsetIsLoading(true);\n\t\tsetTimeout(() => {\n\t\t\tfor (let index = 0; index < 100; index++) {\n\t\t\t\tcryptos.sort((a, b) => {\n\t\t\t\t\treturn (\n\t\t\t\t\t\ta[`${selectOption}`].price_change_pct -\n\t\t\t\t\t\tb[`${selectOption}`].price_change_pct\n\t\t\t\t\t);\n\t\t\t\t});\n\t\t\t}\n\t\t\tsetIsLoading(false);\n\t\t}, 1500);\n\t};\n\n\tconst filtered = !input\n\t\t? cryptos\n\t\t: cryptos.filter((crypto) => {\n\t\t\t\treturn (\n\t\t\t\t\tcrypto.name.toLowerCase().includes(input.toLowerCase()) ||\n\t\t\t\t\tcrypto.id.toLowerCase().includes(input.toLowerCase())\n\t\t\t\t);\n\t\t  });\n\n\tconsole.log(cryptos);\n\n\treturn (\n\t\t<div className=\"prices-table\">\n\t\t\t<div className=\"prices-nav\">\n\t\t\t\t<div className=\"order-options grid\">\n\t\t\t\t\t<ul className=\"flex\">\n\t\t\t\t\t\t<li\n\t\t\t\t\t\t\tclassName={state[0].onAllAssets ? \"on-option\" : \"asset-order\"}\n\t\t\t\t\t\t\tonClick={handleAllClick}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\tAll assets\n\t\t\t\t\t\t</li>\n\t\t\t\t\t\t<li\n\t\t\t\t\t\t\tclassName={state[1].onTopGainers ? \"on-option\" : \"asset-order\"}\n\t\t\t\t\t\t\tonClick={handleGainClick}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\tTop gainers\n\t\t\t\t\t\t</li>\n\t\t\t\t\t\t<li\n\t\t\t\t\t\t\tclassName={state[2].onTopLosers ? \"on-option\" : \"asset-order\"}\n\t\t\t\t\t\t\tonClick={handleLossClick}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\tTop losers\n\t\t\t\t\t\t</li>\n\t\t\t\t\t</ul>\n\t\t\t\t\t<div className=\"\">\n\t\t\t\t\t\t<select\n\t\t\t\t\t\t\tname=\"length\"\n\t\t\t\t\t\t\tid=\"length\"\n\t\t\t\t\t\t\tonChange={handleSelect}\n\t\t\t\t\t\t\tvalue={selectOption}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<option value=\"1h\">1h</option>\n\t\t\t\t\t\t\t<option value=\"1d\">1d</option>\n\t\t\t\t\t\t\t<option value=\"7d\">7d</option>\n\t\t\t\t\t\t\t<option value=\"30d\">30d</option>\n\t\t\t\t\t\t\t<option value=\"365d\">365d</option>\n\t\t\t\t\t\t</select>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\n\t\t\t{isLoading ? (\n\t\t\t\t<div className=\"flex\">\n\t\t\t\t\t<FontAwesomeIcon\n\t\t\t\t\t\tclassName=\"font-awesome\"\n\t\t\t\t\t\tfontWeight=\"light\"\n\t\t\t\t\t\ticon=\"circle-notch\"\n\t\t\t\t\t\tsize=\"2x\"\n\t\t\t\t\t\tspin\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t) : !cryptos.length ? (\n\t\t\t\t\"\"\n\t\t\t) : (\n\t\t\t\t<div className=\"card\">\n\t\t\t\t\t<div className=\"flex\">\n\t\t\t\t\t\t<FontAwesomeIcon\n\t\t\t\t\t\t\tclassName=\"font-awesome-search\"\n\t\t\t\t\t\t\tfontWeight=\"light\"\n\t\t\t\t\t\t\ticon=\"search\"\n\t\t\t\t\t\t\tsize=\"2x\"\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<div className=\"search-input\">\n\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\t\tname=\"\"\n\t\t\t\t\t\t\t\tkey=\"random1\"\n\t\t\t\t\t\t\t\tvalue={input}\n\t\t\t\t\t\t\t\tplaceholder={\"Search all assets...\"}\n\t\t\t\t\t\t\t\tonChange={handleChange}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<table role=\"table\">\n\t\t\t\t\t\t<thead>\n\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t<th className=\"table-serial\">#</th>\n\t\t\t\t\t\t\t\t<th colSpan=\"2\">Name</th>\n\t\t\t\t\t\t\t\t<th className=\"table-empty\"></th>\n\n\t\t\t\t\t\t\t\t<th colSpan=\"2\">Price</th>\n\t\t\t\t\t\t\t\t<th>Change</th>\n\t\t\t\t\t\t\t\t<th>Volume</th>\n\t\t\t\t\t\t\t\t<th className=\"table-trade\">Trade</th>\n\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t</thead>\n\t\t\t\t\t\t<tbody>\n\t\t\t\t\t\t\t{filtered.map((item, index) => {\n\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t<tr key={index}>\n\t\t\t\t\t\t\t\t\t\t<td className=\"table-serial\">{index + 1}</td>\n\t\t\t\t\t\t\t\t\t\t<a href=\"#\">\n\t\t\t\t\t\t\t\t\t\t\t<td colSpan=\"2\" className=\"flex\">\n\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t<img src={item.logo_url} alt={`${item.name} logo`} />\n\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"hidden-flex\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t{item.name} &nbsp;&nbsp; <span>{item.id}</span>\n\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t\t\t</a>\n\n\t\t\t\t\t\t\t\t\t\t<td className=\"table-empty\"></td>\n\n\t\t\t\t\t\t\t\t\t\t<td className=\"table-empty\"></td>\n\t\t\t\t\t\t\t\t\t\t<td className=\"crypto-price\" colSpan=\"2\">\n\t\t\t\t\t\t\t\t\t\t\t{userData.currency.symbol}{\" \"}\n\t\t\t\t\t\t\t\t\t\t\t{`${addCommasToNumber(\n\t\t\t\t\t\t\t\t\t\t\t\tMath.round(item.price * 100) / 100\n\t\t\t\t\t\t\t\t\t\t\t)}`}\n\t\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t\t\t{cryptos[index] ? (\n\t\t\t\t\t\t\t\t\t\t\t<td\n\t\t\t\t\t\t\t\t\t\t\t\tclassName={\n\t\t\t\t\t\t\t\t\t\t\t\t\tcryptos[index][`${selectOption}`].price_change_pct *\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t100 >=\n\t\t\t\t\t\t\t\t\t\t\t\t\t0\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t? \"gains\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t: \"loss\"\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t\t{cryptos[index][`${selectOption}`].price_change_pct *\n\t\t\t\t\t\t\t\t\t\t\t\t\t100 >\n\t\t\t\t\t\t\t\t\t\t\t\t0\n\t\t\t\t\t\t\t\t\t\t\t\t\t? `+${\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tMath.round(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\titem[`${selectOption}`].price_change_pct * 10000\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t) / 100\n\t\t\t\t\t\t\t\t\t\t\t\t\t  }%`\n\t\t\t\t\t\t\t\t\t\t\t\t\t: `${\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tMath.round(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\titem[`${selectOption}`].price_change_pct * 10000\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t) / 100\n\t\t\t\t\t\t\t\t\t\t\t\t\t  }%`}\n\t\t\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\t\t\t\"\"\n\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t\t<td className=\"crypto-volume\">\n\t\t\t\t\t\t\t\t\t\t\t{userData.currency.symbol} {`${abbr(item.market_cap)}`}\n\t\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t\t\t<td className=\"table-trade\">\n\t\t\t\t\t\t\t\t\t\t\t<button className=\"btn\">Trade</button>\n\t\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t</tbody>\n\t\t\t\t\t</table>\n\t\t\t\t</div>\n\t\t\t)}\n\t\t</div>\n\t);\n}\n\nexport default PricesTable;\n","/Users/Chidera/Desktop/react projects/coinbase-clone/src/State/PricesContext.jsx",[],"/Users/Chidera/Desktop/react projects/coinbase-clone/src/Components/PricesTicker.jsx",["127"],"import Axios from \"axios\";\nimport React, { useEffect, useState } from \"react\";\nimport Ticker from \"react-ticker\";\n\n/**Defining API endpoints */\nconst api = {\n\tbase: \"https://api.nomics.com/v1/currencies/ticker?\",\n\tkey: \"f120f033bda2bb941c1e6925f7ecfbe1\",\n\tsparklineBase: \"https://api.nomics.com/v1/currencies/sparkline?\",\n\tzoneKey: \"d65e37f4206340d188baba3c12561f09\",\n\tzoneBase: \"https://api.ipgeolocation.io/ipgeo?\",\n};\n\n/**Regex for commas after every three digits */\nconst addCommasToNumber = (num) => {\n\treturn num.toString().replace(/\\B(?<!\\.\\d*)(?=(\\d{3})+(?!\\d))/g, \",\");\n};\n\nexport default function Trial() {\n\tconst [tickerList, setTickerList] = useState([]);\n\n\tuseEffect(() => {\n\t\tAxios.get(\n\t\t\t`${api.base}key=${api.key}&per-page=25&page=1&convert=EUR&interval=1d`\n\t\t)\n\t\t\t.then((res) => {\n\t\t\t\tconsole.log(res.data);\n\t\t\t\tsetTickerList(res.data);\n\t\t\t})\n\t\t\t.catch((error) => {\n\t\t\t\tconsole.log(error);\n\t\t\t});\n\t\treturn () => {\n\t\t\t// setCryptos([]);\n\t\t\t// setSparkline([]);\n\t\t\tconsole.log(\"cleaned up\");\n\t\t};\n\t}, [setTickerList]);\n\n\tconst tickerArr = React.useMemo(() => [], []);\n\n\ttickerList.forEach((crypto) => {\n\t\ttickerArr.push({\n\t\t\timgSrc: crypto.logo_url,\n\t\t\tname: crypto.name,\n\t\t\tid: crypto.id,\n\t\t\tprice: `${addCommasToNumber(Math.round(crypto.price * 100) / 100)}`,\n\t\t\tchange: `${Math.round(crypto[\"1d\"].price_change_pct * 10000) / 100}%`,\n\t\t});\n\t});\n\n\tconsole.log(tickerArr);\n\n\tconst tickerData = React.useMemo(\n\t\t() => (!tickerList.length ? [] : tickerArr),\n\t\t[tickerArr, tickerList]\n\t);\n\n\treturn (\n\t\t<div className=\"ticker\">\n\t\t\t{/* {arr.map((num) => {\n\t\t\t\treturn <div>{num}</div>;\n\t\t\t})} */}\n\t\t\t{!tickerList.length ? (\n\t\t\t\t\"\"\n\t\t\t) : (\n\t\t\t\t<div className=\"ticker-container\">\n\t\t\t\t\t{tickerData.map((item, index) => {\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<div className=\"ticker-main\" key={index}>\n\t\t\t\t\t\t\t\t<div className=\"flex\">\n\t\t\t\t\t\t\t\t\t{`EUR/${item.id}`} <span>{`${item.change}`}</span>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<p>${`${item.price}`}</p>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t);\n\t\t\t\t\t})}{\" \"}\n\t\t\t\t</div>\n\t\t\t)}\n\t\t</div>\n\t);\n}\n\n// export function PricesTicker() {\n// \treturn (\n// \t\t<div>\n// \t\t\t{/* <Trial /> */}\n// \t\t\t<Ticker offset=\"run-in\" speed={10}>\n// \t\t\t\t{/* {({ index }) => (\n// \t\t\t\t\t<>\n// \t\t\t\t\t\t<h1>This is the Headline of element #{index}!</h1>\n// \t\t\t\t\t\t<img src=\"www.my-image-source.com/\" alt=\"\" />\n// \t\t\t\t\t</>\n// \t\t\t\t)} */}\n// \t\t\t\t{() => <Trial />}\n// \t\t\t</Ticker>\n// \t\t</div>\n// \t);\n// }\n","/Users/Chidera/Desktop/react projects/coinbase-clone/src/State/PricesReducer.jsx",[],"/Users/Chidera/Desktop/react projects/coinbase-clone/src/Components/PricesSparkline.jsx",["128","129","130","131"],"import React, { useContext, useEffect, useState } from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport { PricesSparklineContext } from \"../State/PricesContext\";\n\nexport function PricesBTC() {\n\tconst [sparkline, setSparkline] = useContext(PricesSparklineContext);\n\tconst [dataChart, setDataChart] = useState({});\n\n\t/**chart js styling options */\n\tconst chartOptions = {\n\t\t// maintainAspectRatio: false,\n\t\ttooltips: {\n\t\t\tenabled: false,\n\t\t},\n\t\telements: {\n\t\t\tpoint: { radius: 0 },\n\t\t},\n\t\tlegend: {\n\t\t\tdisplay: false,\n\t\t},\n\t\tscales: {\n\t\t\txAxes: [{ display: false }],\n\t\t\tyAxes: [{ display: false }],\n\t\t},\n\t};\n\n\t/**creating empty arrays for the chart data and pushing the props gotten from home component */\n\n\tuseEffect(() => {\n\t\tlet prices = [];\n\t\tlet timestamps = [];\n\t\tprices.push(sparkline[0].prices);\n\t\ttimestamps.push(sparkline[0].timestamps);\n\n\t\tsetDataChart({\n\t\t\tlabels: timestamps[0],\n\t\t\tdatasets: [\n\t\t\t\t{\n\t\t\t\t\tlabel: \"prices\",\n\t\t\t\t\tdata: prices[0],\n\t\t\t\t\tborderColor: \"rgba(17, 51, 83, 0.3)\",\n\t\t\t\t\tfill: false,\n\t\t\t\t},\n\t\t\t],\n\t\t});\n\t}, [sparkline]);\n\n\treturn (\n\t\t<div className=\"sparkline-container\">\n\t\t\t<Line data={dataChart} options={chartOptions} />\n\t\t</div>\n\t);\n}\n\nexport function PricesXTZ() {\n\tconst [sparkline, setSparkline] = useContext(PricesSparklineContext);\n\tconst [dataChart, setDataChart] = useState({});\n\n\t/**chart js styling options */\n\tconst chartOptions = {\n\t\t// maintainAspectRatio: false,\n\t\ttooltips: {\n\t\t\tenabled: false,\n\t\t},\n\t\telements: {\n\t\t\tpoint: { radius: 0 },\n\t\t},\n\t\tlegend: {\n\t\t\tdisplay: false,\n\t\t},\n\t\tscales: {\n\t\t\txAxes: [{ display: false }],\n\t\t\tyAxes: [{ display: false }],\n\t\t},\n\t};\n\n\t/**creating empty arrays for the chart data and pushing the props gotten from home component */\n\n\tuseEffect(() => {\n\t\tlet prices = [];\n\t\tlet timestamps = [];\n\t\tprices.push(sparkline[1].prices);\n\t\ttimestamps.push(sparkline[1].timestamps);\n\n\t\tsetDataChart({\n\t\t\tlabels: timestamps[0],\n\t\t\tdatasets: [\n\t\t\t\t{\n\t\t\t\t\tlabel: \"prices\",\n\t\t\t\t\tdata: prices[0],\n\t\t\t\t\tborderColor: \"rgba(17, 51, 83, 0.3)\",\n\t\t\t\t\tfill: false,\n\t\t\t\t},\n\t\t\t],\n\t\t});\n\t}, [sparkline]);\n\n\treturn (\n\t\t<div className=\"sparkline-container\">\n\t\t\t<Line data={dataChart} options={chartOptions} />\n\t\t</div>\n\t);\n}\n\nexport function PricesGRT() {\n\tconst [sparkline, setSparkline] = useContext(PricesSparklineContext);\n\tconst [dataChart, setDataChart] = useState({});\n\n\t/**chart js styling options */\n\tconst chartOptions = {\n\t\t// maintainAspectRatio: false,\n\t\ttooltips: {\n\t\t\tenabled: false,\n\t\t},\n\t\telements: {\n\t\t\tpoint: { radius: 0 },\n\t\t},\n\t\tlegend: {\n\t\t\tdisplay: false,\n\t\t},\n\t\tscales: {\n\t\t\txAxes: [{ display: false }],\n\t\t\tyAxes: [{ display: false }],\n\t\t},\n\t};\n\n\t/**creating empty arrays for the chart data and pushing the props gotten from home component */\n\n\tuseEffect(() => {\n\t\tlet prices = [];\n\t\tlet timestamps = [];\n\t\tprices.push(sparkline[2].prices);\n\t\ttimestamps.push(sparkline[2].timestamps);\n\n\t\tsetDataChart({\n\t\t\tlabels: timestamps[0],\n\t\t\tdatasets: [\n\t\t\t\t{\n\t\t\t\t\tlabel: \"prices\",\n\t\t\t\t\tdata: prices[0],\n\t\t\t\t\tborderColor: \"rgba(17, 51, 83, 0.3)\",\n\t\t\t\t\tfill: false,\n\t\t\t\t},\n\t\t\t],\n\t\t});\n\t}, [sparkline]);\n\n\treturn (\n\t\t<div className=\"sparkline-container\">\n\t\t\t<Line data={dataChart} options={chartOptions} />\n\t\t</div>\n\t);\n}\n\nexport function PricesBAT() {\n\tconst [sparkline, setSparkline] = useContext(PricesSparklineContext);\n\tconst [dataChart, setDataChart] = useState({});\n\n\t/**chart js styling options */\n\tconst chartOptions = {\n\t\t// maintainAspectRatio: false,\n\t\ttooltips: {\n\t\t\tenabled: false,\n\t\t},\n\t\telements: {\n\t\t\tpoint: { radius: 0 },\n\t\t},\n\t\tlegend: {\n\t\t\tdisplay: false,\n\t\t},\n\t\tscales: {\n\t\t\txAxes: [{ display: false }],\n\t\t\tyAxes: [{ display: false }],\n\t\t},\n\t};\n\n\t/**creating empty arrays for the chart data and pushing the props gotten from home component */\n\n\tuseEffect(() => {\n\t\tlet prices = [];\n\t\tlet timestamps = [];\n\t\tprices.push(sparkline[3].prices);\n\t\ttimestamps.push(sparkline[3].timestamps);\n\n\t\tsetDataChart({\n\t\t\tlabels: timestamps[0],\n\t\t\tdatasets: [\n\t\t\t\t{\n\t\t\t\t\tlabel: \"prices\",\n\t\t\t\t\tdata: prices[0],\n\t\t\t\t\tborderColor: \"rgba(17, 51, 83, 0.3)\",\n\t\t\t\t\tfill: false,\n\t\t\t\t},\n\t\t\t],\n\t\t});\n\t}, [sparkline]);\n\n\treturn (\n\t\t<div className=\"sparkline-container\">\n\t\t\t<Line data={dataChart} options={chartOptions} />\n\t\t</div>\n\t);\n}\n",{"ruleId":"132","replacedBy":"133"},{"ruleId":"134","replacedBy":"135"},{"ruleId":"136","severity":1,"message":"137","line":176,"column":10,"nodeType":"138","endLine":176,"endColumn":22},{"ruleId":"139","severity":1,"message":"140","line":13,"column":8,"nodeType":"141","messageId":"142","endLine":13,"endColumn":20},{"ruleId":"139","severity":1,"message":"143","line":39,"column":18,"nodeType":"141","messageId":"142","endLine":39,"endColumn":28},{"ruleId":"139","severity":1,"message":"144","line":40,"column":19,"nodeType":"141","messageId":"142","endLine":40,"endColumn":30},{"ruleId":"139","severity":1,"message":"145","line":41,"column":20,"nodeType":"141","messageId":"142","endLine":41,"endColumn":32},{"ruleId":"139","severity":1,"message":"146","line":42,"column":26,"nodeType":"141","messageId":"142","endLine":42,"endColumn":44},{"ruleId":"139","severity":1,"message":"145","line":7,"column":20,"nodeType":"141","messageId":"142","endLine":7,"endColumn":32},{"ruleId":"147","severity":1,"message":"148","line":45,"column":5,"nodeType":"149","endLine":45,"endColumn":7,"suggestions":"150"},{"ruleId":"139","severity":1,"message":"145","line":56,"column":20,"nodeType":"141","messageId":"142","endLine":56,"endColumn":32},{"ruleId":"139","severity":1,"message":"145","line":108,"column":20,"nodeType":"141","messageId":"142","endLine":108,"endColumn":32},{"ruleId":"139","severity":1,"message":"145","line":157,"column":20,"nodeType":"141","messageId":"142","endLine":157,"endColumn":32},{"ruleId":"139","severity":1,"message":"151","line":59,"column":9,"nodeType":"141","messageId":"142","endLine":59,"endColumn":18},{"ruleId":"136","severity":1,"message":"137","line":268,"column":11,"nodeType":"138","endLine":268,"endColumn":23},{"ruleId":"139","severity":1,"message":"152","line":3,"column":8,"nodeType":"141","messageId":"142","endLine":3,"endColumn":14},{"ruleId":"139","severity":1,"message":"145","line":6,"column":20,"nodeType":"141","messageId":"142","endLine":6,"endColumn":32},{"ruleId":"139","severity":1,"message":"145","line":56,"column":20,"nodeType":"141","messageId":"142","endLine":56,"endColumn":32},{"ruleId":"139","severity":1,"message":"145","line":106,"column":20,"nodeType":"141","messageId":"142","endLine":106,"endColumn":32},{"ruleId":"139","severity":1,"message":"145","line":156,"column":20,"nodeType":"141","messageId":"142","endLine":156,"endColumn":32},"no-native-reassign",["153"],"no-negated-in-lhs",["154"],"jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-unused-vars","'PricesTicker' is defined but never used.","Identifier","unusedVar","'setCryptos' is assigned a value but never used.","'setUserData' is assigned a value but never used.","'setSparkline' is assigned a value but never used.","'setShowcaseCryptos' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'sparkline'. Either include it or remove the dependency array.","ArrayExpression",["155"],"'sparkline' is assigned a value but never used.","'Ticker' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"156","fix":"157"},"Update the dependencies array to be: [sparkline]",{"range":"158","text":"159"},[1032,1034],"[sparkline]"]